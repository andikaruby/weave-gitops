// Code generated by counterfeiter. DO NOT EDIT.
package chartsfakes

import (
	"context"
	"sync"

	"github.com/fluxcd/source-controller/api/v1beta1"
	"github.com/weaveworks/weave-gitops/pkg/api/profiles"
	"github.com/weaveworks/weave-gitops/pkg/charts"
)

type FakeChartScanner struct {
	ScanChartsStub        func(context.Context, *v1beta1.HelmRepository, charts.ChartPredicate) ([]*profiles.Profile, error)
	scanChartsMutex       sync.RWMutex
	scanChartsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 charts.ChartPredicate
	}
	scanChartsReturns struct {
		result1 []*profiles.Profile
		result2 error
	}
	scanChartsReturnsOnCall map[int]struct {
		result1 []*profiles.Profile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChartScanner) ScanCharts(arg1 context.Context, arg2 *v1beta1.HelmRepository, arg3 charts.ChartPredicate) ([]*profiles.Profile, error) {
	fake.scanChartsMutex.Lock()
	ret, specificReturn := fake.scanChartsReturnsOnCall[len(fake.scanChartsArgsForCall)]
	fake.scanChartsArgsForCall = append(fake.scanChartsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 charts.ChartPredicate
	}{arg1, arg2, arg3})
	stub := fake.ScanChartsStub
	fakeReturns := fake.scanChartsReturns
	fake.recordInvocation("ScanCharts", []interface{}{arg1, arg2, arg3})
	fake.scanChartsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChartScanner) ScanChartsCallCount() int {
	fake.scanChartsMutex.RLock()
	defer fake.scanChartsMutex.RUnlock()
	return len(fake.scanChartsArgsForCall)
}

func (fake *FakeChartScanner) ScanChartsCalls(stub func(context.Context, *v1beta1.HelmRepository, charts.ChartPredicate) ([]*profiles.Profile, error)) {
	fake.scanChartsMutex.Lock()
	defer fake.scanChartsMutex.Unlock()
	fake.ScanChartsStub = stub
}

func (fake *FakeChartScanner) ScanChartsArgsForCall(i int) (context.Context, *v1beta1.HelmRepository, charts.ChartPredicate) {
	fake.scanChartsMutex.RLock()
	defer fake.scanChartsMutex.RUnlock()
	argsForCall := fake.scanChartsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeChartScanner) ScanChartsReturns(result1 []*profiles.Profile, result2 error) {
	fake.scanChartsMutex.Lock()
	defer fake.scanChartsMutex.Unlock()
	fake.ScanChartsStub = nil
	fake.scanChartsReturns = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeChartScanner) ScanChartsReturnsOnCall(i int, result1 []*profiles.Profile, result2 error) {
	fake.scanChartsMutex.Lock()
	defer fake.scanChartsMutex.Unlock()
	fake.ScanChartsStub = nil
	if fake.scanChartsReturnsOnCall == nil {
		fake.scanChartsReturnsOnCall = make(map[int]struct {
			result1 []*profiles.Profile
			result2 error
		})
	}
	fake.scanChartsReturnsOnCall[i] = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeChartScanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanChartsMutex.RLock()
	defer fake.scanChartsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChartScanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ charts.ChartScanner = new(FakeChartScanner)
