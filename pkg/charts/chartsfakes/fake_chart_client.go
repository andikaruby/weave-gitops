// Code generated by counterfeiter. DO NOT EDIT.
package chartsfakes

import (
	"context"
	"sync"

	"github.com/fluxcd/source-controller/api/v1beta1"
	"github.com/weaveworks/weave-gitops/pkg/charts"
)

type FakeChartClient struct {
	FileFromChartStub        func(context.Context, *charts.ChartReference, string) ([]byte, error)
	fileFromChartMutex       sync.RWMutex
	fileFromChartArgsForCall []struct {
		arg1 context.Context
		arg2 *charts.ChartReference
		arg3 string
	}
	fileFromChartReturns struct {
		result1 []byte
		result2 error
	}
	fileFromChartReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SetRepositoryStub        func(*v1beta1.HelmRepository)
	setRepositoryMutex       sync.RWMutex
	setRepositoryArgsForCall []struct {
		arg1 *v1beta1.HelmRepository
	}
	UpdateCacheStub        func(context.Context) error
	updateCacheMutex       sync.RWMutex
	updateCacheArgsForCall []struct {
		arg1 context.Context
	}
	updateCacheReturns struct {
		result1 error
	}
	updateCacheReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChartClient) FileFromChart(arg1 context.Context, arg2 *charts.ChartReference, arg3 string) ([]byte, error) {
	fake.fileFromChartMutex.Lock()
	ret, specificReturn := fake.fileFromChartReturnsOnCall[len(fake.fileFromChartArgsForCall)]
	fake.fileFromChartArgsForCall = append(fake.fileFromChartArgsForCall, struct {
		arg1 context.Context
		arg2 *charts.ChartReference
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FileFromChartStub
	fakeReturns := fake.fileFromChartReturns
	fake.recordInvocation("FileFromChart", []interface{}{arg1, arg2, arg3})
	fake.fileFromChartMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChartClient) FileFromChartCallCount() int {
	fake.fileFromChartMutex.RLock()
	defer fake.fileFromChartMutex.RUnlock()
	return len(fake.fileFromChartArgsForCall)
}

func (fake *FakeChartClient) FileFromChartCalls(stub func(context.Context, *charts.ChartReference, string) ([]byte, error)) {
	fake.fileFromChartMutex.Lock()
	defer fake.fileFromChartMutex.Unlock()
	fake.FileFromChartStub = stub
}

func (fake *FakeChartClient) FileFromChartArgsForCall(i int) (context.Context, *charts.ChartReference, string) {
	fake.fileFromChartMutex.RLock()
	defer fake.fileFromChartMutex.RUnlock()
	argsForCall := fake.fileFromChartArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeChartClient) FileFromChartReturns(result1 []byte, result2 error) {
	fake.fileFromChartMutex.Lock()
	defer fake.fileFromChartMutex.Unlock()
	fake.FileFromChartStub = nil
	fake.fileFromChartReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeChartClient) FileFromChartReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.fileFromChartMutex.Lock()
	defer fake.fileFromChartMutex.Unlock()
	fake.FileFromChartStub = nil
	if fake.fileFromChartReturnsOnCall == nil {
		fake.fileFromChartReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.fileFromChartReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeChartClient) SetRepository(arg1 *v1beta1.HelmRepository) {
	fake.setRepositoryMutex.Lock()
	fake.setRepositoryArgsForCall = append(fake.setRepositoryArgsForCall, struct {
		arg1 *v1beta1.HelmRepository
	}{arg1})
	stub := fake.SetRepositoryStub
	fake.recordInvocation("SetRepository", []interface{}{arg1})
	fake.setRepositoryMutex.Unlock()
	if stub != nil {
		fake.SetRepositoryStub(arg1)
	}
}

func (fake *FakeChartClient) SetRepositoryCallCount() int {
	fake.setRepositoryMutex.RLock()
	defer fake.setRepositoryMutex.RUnlock()
	return len(fake.setRepositoryArgsForCall)
}

func (fake *FakeChartClient) SetRepositoryCalls(stub func(*v1beta1.HelmRepository)) {
	fake.setRepositoryMutex.Lock()
	defer fake.setRepositoryMutex.Unlock()
	fake.SetRepositoryStub = stub
}

func (fake *FakeChartClient) SetRepositoryArgsForCall(i int) *v1beta1.HelmRepository {
	fake.setRepositoryMutex.RLock()
	defer fake.setRepositoryMutex.RUnlock()
	argsForCall := fake.setRepositoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeChartClient) UpdateCache(arg1 context.Context) error {
	fake.updateCacheMutex.Lock()
	ret, specificReturn := fake.updateCacheReturnsOnCall[len(fake.updateCacheArgsForCall)]
	fake.updateCacheArgsForCall = append(fake.updateCacheArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.UpdateCacheStub
	fakeReturns := fake.updateCacheReturns
	fake.recordInvocation("UpdateCache", []interface{}{arg1})
	fake.updateCacheMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeChartClient) UpdateCacheCallCount() int {
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	return len(fake.updateCacheArgsForCall)
}

func (fake *FakeChartClient) UpdateCacheCalls(stub func(context.Context) error) {
	fake.updateCacheMutex.Lock()
	defer fake.updateCacheMutex.Unlock()
	fake.UpdateCacheStub = stub
}

func (fake *FakeChartClient) UpdateCacheArgsForCall(i int) context.Context {
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	argsForCall := fake.updateCacheArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeChartClient) UpdateCacheReturns(result1 error) {
	fake.updateCacheMutex.Lock()
	defer fake.updateCacheMutex.Unlock()
	fake.UpdateCacheStub = nil
	fake.updateCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeChartClient) UpdateCacheReturnsOnCall(i int, result1 error) {
	fake.updateCacheMutex.Lock()
	defer fake.updateCacheMutex.Unlock()
	fake.UpdateCacheStub = nil
	if fake.updateCacheReturnsOnCall == nil {
		fake.updateCacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeChartClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileFromChartMutex.RLock()
	defer fake.fileFromChartMutex.RUnlock()
	fake.setRepositoryMutex.RLock()
	defer fake.setRepositoryMutex.RUnlock()
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChartClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ charts.ChartClient = new(FakeChartClient)
