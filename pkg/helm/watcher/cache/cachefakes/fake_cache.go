// Code generated by counterfeiter. DO NOT EDIT.
package cachefakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/api/profiles"
	"github.com/weaveworks/weave-gitops/pkg/helm/watcher/cache"
)

type FakeCache struct {
	GetProfileValuesStub        func(string, string, string, string) ([]byte, error)
	getProfileValuesMutex       sync.RWMutex
	getProfileValuesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	getProfileValuesReturns struct {
		result1 []byte
		result2 error
	}
	getProfileValuesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetProfilesStub        func(string, string) ([]*profiles.Profile, error)
	getProfilesMutex       sync.RWMutex
	getProfilesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getProfilesReturns struct {
		result1 []*profiles.Profile
		result2 error
	}
	getProfilesReturnsOnCall map[int]struct {
		result1 []*profiles.Profile
		result2 error
	}
	UpdateStub        func(string, string, cache.Data) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 cache.Data
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCache) GetProfileValues(arg1 string, arg2 string, arg3 string, arg4 string) ([]byte, error) {
	fake.getProfileValuesMutex.Lock()
	ret, specificReturn := fake.getProfileValuesReturnsOnCall[len(fake.getProfileValuesArgsForCall)]
	fake.getProfileValuesArgsForCall = append(fake.getProfileValuesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetProfileValuesStub
	fakeReturns := fake.getProfileValuesReturns
	fake.recordInvocation("GetProfileValues", []interface{}{arg1, arg2, arg3, arg4})
	fake.getProfileValuesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCache) GetProfileValuesCallCount() int {
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	return len(fake.getProfileValuesArgsForCall)
}

func (fake *FakeCache) GetProfileValuesCalls(stub func(string, string, string, string) ([]byte, error)) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = stub
}

func (fake *FakeCache) GetProfileValuesArgsForCall(i int) (string, string, string, string) {
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	argsForCall := fake.getProfileValuesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCache) GetProfileValuesReturns(result1 []byte, result2 error) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = nil
	fake.getProfileValuesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) GetProfileValuesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = nil
	if fake.getProfileValuesReturnsOnCall == nil {
		fake.getProfileValuesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getProfileValuesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) GetProfiles(arg1 string, arg2 string) ([]*profiles.Profile, error) {
	fake.getProfilesMutex.Lock()
	ret, specificReturn := fake.getProfilesReturnsOnCall[len(fake.getProfilesArgsForCall)]
	fake.getProfilesArgsForCall = append(fake.getProfilesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProfilesStub
	fakeReturns := fake.getProfilesReturns
	fake.recordInvocation("GetProfiles", []interface{}{arg1, arg2})
	fake.getProfilesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCache) GetProfilesCallCount() int {
	fake.getProfilesMutex.RLock()
	defer fake.getProfilesMutex.RUnlock()
	return len(fake.getProfilesArgsForCall)
}

func (fake *FakeCache) GetProfilesCalls(stub func(string, string) ([]*profiles.Profile, error)) {
	fake.getProfilesMutex.Lock()
	defer fake.getProfilesMutex.Unlock()
	fake.GetProfilesStub = stub
}

func (fake *FakeCache) GetProfilesArgsForCall(i int) (string, string) {
	fake.getProfilesMutex.RLock()
	defer fake.getProfilesMutex.RUnlock()
	argsForCall := fake.getProfilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCache) GetProfilesReturns(result1 []*profiles.Profile, result2 error) {
	fake.getProfilesMutex.Lock()
	defer fake.getProfilesMutex.Unlock()
	fake.GetProfilesStub = nil
	fake.getProfilesReturns = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) GetProfilesReturnsOnCall(i int, result1 []*profiles.Profile, result2 error) {
	fake.getProfilesMutex.Lock()
	defer fake.getProfilesMutex.Unlock()
	fake.GetProfilesStub = nil
	if fake.getProfilesReturnsOnCall == nil {
		fake.getProfilesReturnsOnCall = make(map[int]struct {
			result1 []*profiles.Profile
			result2 error
		})
	}
	fake.getProfilesReturnsOnCall[i] = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) Update(arg1 string, arg2 string, arg3 cache.Data) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 cache.Data
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCache) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeCache) UpdateCalls(stub func(string, string, cache.Data) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeCache) UpdateArgsForCall(i int) (string, string, cache.Data) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCache) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	fake.getProfilesMutex.RLock()
	defer fake.getProfilesMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache.Cache = new(FakeCache)
