{
  "swagger": "2.0",
  "info": {
    "title": "Weave GitOps Core API",
    "description": "The API handles operations for Weave GitOps Core",
    "version": "0.1"
  },
  "tags": [
    {
      "name": "default",
      "description": "system endpoints"
    },
    {
      "name": "objects",
      "description": "Query and trigger kubernetes resources"
    },
    {
      "name": "policy",
      "description": "Query policy config and validations"
    },
    {
      "name": "internal",
      "description": "Internal APIs which should not be used"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/child_objects": {
      "post": {
        "summary": "Returns the children of a given object",
        "description": "Use /inventory instead",
        "operationId": "Core_GetChildObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetChildObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetChildObjectsRequest"
            }
          }
        ],
        "tags": [
          "internal"
        ],
        "deprecated": true
      }
    },
    "/v1/crds/{name}/is-available": {
      "get": {
        "summary": "Check which clusters have a given CRD installed",
        "description": "Returns a map where the keys are cluster names, and the value is a boolean indicating\nwhether the given `CustomResourceDefinition` resource is available on that cluster.",
        "operationId": "Core_IsCRDAvailable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsCRDAvailableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the CustomResourceDefinition to check availability for across clusters. e.g.\n- `imageupdateautomations.image.toolkit.fluxcd.io`\n- `gitopssets.templates.weave.works`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/v1/feature-flags": {
      "get": {
        "summary": "Get feature flags",
        "description": "Return infomation about what features and configuration options are enabled on the server.\n\nNew features are sometimes hidden behind feature flags. Other features (e.g. OIDC) can be enabled/disabled.",
        "operationId": "Core_GetFeatureFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFeatureFlagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/v1/flux/crds": {
      "get": {
        "summary": "Lists the Flux CRDs across all clusters",
        "description": "Determine which flux CRDs are installed on which clusters and at what version.",
        "operationId": "Core_ListFluxCrds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFluxCrdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/v1/flux/deployments": {
      "get": {
        "summary": "Lists the Flux runtime deployments across all clusters",
        "description": "Determine which controllers are installed, their image versions, status, etc.",
        "operationId": "Core_ListFluxRuntimeObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFluxRuntimeObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/v1/namespaces/{namespace}/objects/{kind}/{name}": {
      "get": {
        "summary": "Get details of an object",
        "description": "Kind is used as the primary identifier rather than GroupVersionKind\n\nSupported kinds are:\n\n - some of the base Kubernetes groups including core (e.g. `ConfigMap`) and apps (e.g. `Deployment`)\n - All the of the Flux Custom Resource kinds e.g. (`GitRepository`, `HelmRelease`, `Kustomization`, `ImageAutomation`)\n - If using enterprise, `GitOpsSet` and `AutomatedClusterDiscovery` are also available",
        "operationId": "Core_GetObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/namespaces/{namespace}/objects/{kind}/{name}/events": {
      "get": {
        "summary": "List events for an object",
        "description": "Kind is used as the primary identifier rather than GroupVersionKind\n\nSupported kinds are:\n\n - some of the base Kubernetes groups including core (e.g. `ConfigMap`) and apps (e.g. `Deployment`)\n - All the of the Flux Custom Resource kinds e.g. (`GitRepository`, `HelmRelease`, `Kustomization`, `ImageAutomation`)\n - If using enterprise, `GitOpsSet` and `AutomatedClusterDiscovery` are also available",
        "operationId": "Core_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/namespaces/{namespace}/objects/{kind}/{name}/inventory": {
      "get": {
        "summary": "Get the inventory of an object",
        "description": "Look up the inventory of a given object. The inventory is a list of\nobjects that were created as a result of reconciling the given object.\n\nThe response includes the full kubernetes resource for each inventory item.",
        "operationId": "Core_GetInventory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetInventoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "Supported kinds are `Kustomization` and `HelmRelease`\nIf using Enterprise, `GitOpsSet` and `AutomatedClusterDiscovery` are also supported",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withChildren",
            "description": "If true, the children of certain resources like Deployments and Replicasets will be included in the response",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/objects/{kind}": {
      "get": {
        "summary": "List objects of kind across all clusters",
        "description": "Kind is used as the primary identifier rather than GroupVersionKind\n\nSupported kinds are:\n\n - some of the base Kubernetes groups including core (e.g. `ConfigMap`) and apps (e.g. `Deployment`)\n - All the of the Flux Custom Resource kinds e.g. (`GitRepository`, `HelmRelease`, `Kustomization`, `ImageAutomation`)\n - If using enterprise, `GitOpsSet` and `AutomatedClusterDiscovery` are also available",
        "operationId": "Core_ListObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "kind",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/policies": {
      "get": {
        "summary": "List policies available across all clusters",
        "description": "This will return all the `Policy` custom resources that are available across all clusters.",
        "operationId": "Core_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageSize",
            "description": "controls the number of results per page from each cluster",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "description": "a composite token used to retrieve the next page of results across all clusters\nthis is availble in the response as `nextPageToken`",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "policy"
        ]
      }
    },
    "/v1/policies/{name}": {
      "get": {
        "summary": "Gets a policy",
        "description": "Get a `Policy` custom resource by name and cluster.",
        "operationId": "Core_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the `Policy` resource to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "description": "The name of the cluster to retrieve the policy from. Default is the cluster running the API server.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "policy"
        ]
      }
    },
    "/v1/policy-validations": {
      "get": {
        "summary": "Lists policy validations across all clusters",
        "description": "Can be filtered by a few different properties of the `involvedObject`",
        "operationId": "Core_ListPolicyValidations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPolicyValidationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "description": "filter for validations on a particular cluster",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageSize",
            "description": "controls the number of results per page from each cluster",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "description": "a composite token used to retrieve the next page of results across all clusters\nthis is availble in the response as `nextPageToken`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "application",
            "description": "filter by `involvedObject.name`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "filter by `involvedObject.namespace`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "filter by `involvedObject.kind`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policyId",
            "description": "filter by id of the policy that triggered the validation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "validationType",
            "description": "filter for validation types of `Admission` or `Audit`",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "policy"
        ]
      }
    },
    "/v1/policy-validations/{validationId}": {
      "get": {
        "summary": "Gets a policy validation",
        "description": "Given a specific validation id, returns the validation details.",
        "operationId": "Core_GetPolicyValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "validationId",
            "description": "The id of the validation.\nThis is often obtained from:\n- from the list policy validations endpoint.\n- from `Event` objects raised by the policy-agent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "validationType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "policy"
        ]
      }
    },
    "/v1/reconciled_objects": {
      "post": {
        "summary": "Get the list of objects that were created as a result of reconciling a Flux automation.",
        "description": "Use /inventory instead",
        "operationId": "Core_GetReconciledObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReconciledObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetReconciledObjectsRequest"
            }
          }
        ],
        "tags": [
          "internal"
        ],
        "deprecated": true
      }
    },
    "/v1/session-logs": {
      "get": {
        "summary": "Get the logs for a GitOpsRun session",
        "description": "The GitOpsRun feature has been removed",
        "operationId": "Core_GetSessionLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSessionLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionNamespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "logSourceFilter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "logLevelFilter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "internal"
        ],
        "deprecated": true
      }
    },
    "/v1/suspend": {
      "patch": {
        "summary": "Suspend or resume reconciling multiple Flux objects",
        "description": "Provide a list of objects to be suspended or resumed. Objects are identified by their kind, name, namespace and cluster.\n\nSupported kinds are:\n\n- any Flux custom resource (e.g. `GitRepository` or `HelmRelease`)\n- Enterprise objects that also support this pattern: `GitOpsSet` and `AutomatedClusterDiscovery`",
        "operationId": "Core_ToggleSuspendResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ToggleSuspendResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ToggleSuspendResourceRequest"
            }
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/sync": {
      "patch": {
        "summary": "Trigger reconciliation of multiple Flux objects",
        "description": "Provide a list of objects to be reconciled. Objects are identified by their kind, name, namespace and cluster.\n\nSupported kinds are:\n\n- all Flux custom resources (e.g. `GitRepository` or `HelmRelease`)\n- Enterprise objects that also support this pattern: `GitOpsSet` and `AutomatedClusterDiscovery`\n\nif `withSource` is true the dependent Source resource will be synced too.\nSyncing a Kustomization `withSource` will sync an attached GitRepository.",
        "operationId": "Core_SyncFluxObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncFluxObjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncFluxObjectRequest"
            }
          }
        ],
        "tags": [
          "objects"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "summary": "Get version information about the server",
        "description": "Version information about weave-gitops including when the runninng server was built, the git commit and the git tag.\nAlso return the kubernetes version of the cluster running weave-gitops.",
        "operationId": "Core_GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CrdName": {
      "type": "object",
      "properties": {
        "plural": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ClusterNamespaceList": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "v1Crd": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/CrdName"
        },
        "version": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Deployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Condition"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suspended": {
          "type": "boolean"
        },
        "clusterName": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "description": "The LastTimestamp of the event."
        },
        "component": {
          "type": "string",
          "description": "The Source Component."
        },
        "host": {
          "type": "string",
          "description": "The Source Host."
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1GetChildObjectsRequest": {
      "type": "object",
      "properties": {
        "groupVersionKind": {
          "$ref": "#/definitions/v1GroupVersionKind"
        },
        "namespace": {
          "type": "string"
        },
        "parentUid": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetChildObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Object"
          }
        }
      }
    },
    "v1GetFeatureFlagsResponse": {
      "type": "object",
      "example": {
        "flags": {
          "WEAVE_GITOPS_FEATURE_TENANCY": "true",
          "OIDC_AUTH": "true"
        }
      },
      "properties": {
        "flags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1GetInventoryResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InventoryEntry"
          }
        }
      }
    },
    "v1GetObjectResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object"
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PolicyObj"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetPolicyValidationResponse": {
      "type": "object",
      "properties": {
        "validation": {
          "$ref": "#/definitions/v1PolicyValidation"
        }
      }
    },
    "v1GetReconciledObjectsRequest": {
      "type": "object",
      "properties": {
        "automationName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "automationKind": {
          "type": "string"
        },
        "kinds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupVersionKind"
          }
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetReconciledObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Object"
          }
        }
      }
    },
    "v1GetSessionLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LogEntry"
          }
        },
        "nextToken": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "logSources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetVersionResponse": {
      "type": "object",
      "properties": {
        "semver": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "buildTime": {
          "type": "string"
        },
        "kubeVersion": {
          "type": "string"
        }
      }
    },
    "v1GroupVersionKind": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "GroupVersionKind represents an objects Kubernetes API type data"
    },
    "v1HealthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1InventoryEntry": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "description": "A JSON string containing the complete Kubernetes object."
        },
        "tenant": {
          "type": "string",
          "description": "The tenant the object belongs to if any."
        },
        "clusterName": {
          "type": "string",
          "description": "The cluster the object is deployed to."
        },
        "health": {
          "$ref": "#/definitions/v1HealthStatus"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InventoryEntry"
          },
          "description": "If the object is a parent e.g. `ReplicaSet` -\u003e `Pod`\nThen the children are included here with their payload, clusterName etc\nThis a recursive structure."
        }
      }
    },
    "v1IsCRDAvailableResponse": {
      "type": "object",
      "example": {
        "clusters": {
          "clusters-1": true
        }
      },
      "properties": {
        "clusters": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "v1ListError": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "description": "Queries are made to each cluster. If its a namespaced query then a query\nis made per namespace too. If an error occurs for any specific query the error\nmessage is included here alongside the results for the queries that succeeded."
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Event"
          }
        }
      }
    },
    "v1ListFluxCrdsResponse": {
      "type": "object",
      "properties": {
        "crds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Crd"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListFluxRuntimeObjectsResponse": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Deployment"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Object"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListError"
          }
        },
        "searchedNamespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ClusterNamespaceList"
          }
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyObj"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListPolicyValidationsResponse": {
      "type": "object",
      "properties": {
        "violations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyValidation"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1LogEntry": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "sortingKey": {
          "type": "string"
        }
      }
    },
    "v1Object": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "description": "A JSON string containing the complete Kubernetes object."
        },
        "clusterName": {
          "type": "string",
          "description": "The cluster the object is deployed to."
        },
        "tenant": {
          "type": "string",
          "description": "The tenant the object belongs to if any."
        },
        "uid": {
          "type": "string",
          "description": "The Kubernetes UID of the object."
        },
        "inventory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupVersionKind"
          },
          "description": "DEPRECATED, use /inventory endpoint."
        },
        "info": {
          "type": "string",
          "description": "DEPRECATED, GitOpsRun field."
        },
        "health": {
          "$ref": "#/definitions/v1HealthStatus"
        }
      }
    },
    "v1ObjectRef": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "title": "controls the number of results per page from each cluster"
        },
        "pageToken": {
          "type": "string",
          "title": "a composite token used to retrieve the next page of results across all clusters\nthis is availble in the response as `nextPageToken`"
        }
      }
    },
    "v1PolicyObj": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "howToSolve": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "severity": {
          "type": "string"
        },
        "standards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyStandard"
          }
        },
        "gitCommit": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyParam"
          }
        },
        "targets": {
          "$ref": "#/definitions/v1PolicyTargets"
        },
        "createdAt": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "modes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny",
          "title": "value is a generic value that can be a string, int, bool and array of\nstrings"
        },
        "required": {
          "type": "boolean"
        }
      }
    },
    "v1PolicyStandard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyTargetLabel": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyTargets": {
      "type": "object",
      "properties": {
        "kinds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyTargetLabel"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyValidation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "entity": {
          "type": "string"
        },
        "entityKind": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "violatingEntity": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "howToSolve": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyValidationOccurrence"
          }
        },
        "policyId": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyValidationParam"
          }
        }
      }
    },
    "v1PolicyValidationOccurrence": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1PolicyValidationParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        },
        "required": {
          "type": "boolean"
        },
        "configRef": {
          "type": "string"
        }
      }
    },
    "v1SyncFluxObjectRequest": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ObjectRef"
          },
          "description": "The list of objects to sync."
        },
        "withSource": {
          "type": "boolean"
        }
      }
    },
    "v1SyncFluxObjectResponse": {
      "type": "object"
    },
    "v1ToggleSuspendResourceRequest": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ObjectRef"
          },
          "description": "The list of objects to suspend or resume."
        },
        "suspend": {
          "type": "boolean",
          "description": "Suspend or resume the resources."
        },
        "comment": {
          "type": "string",
          "description": "Include a comment about why the resources are being suspended."
        }
      }
    },
    "v1ToggleSuspendResourceResponse": {
      "type": "object"
    }
  }
}
